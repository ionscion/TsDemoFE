/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CounterImport } from './routes/counter'
import { Route as AboutImport } from './routes/about'
import { Route as ClientsRouteImport } from './routes/clients.route'
import { Route as IndexImport } from './routes/index'
import { Route as ClientsIndexImport } from './routes/clients.index'
import { Route as ClientsClientIdImport } from './routes/clients.$clientId'

// Create/Update Routes

const CounterRoute = CounterImport.update({
  id: '/counter',
  path: '/counter',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ClientsRouteRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ClientsIndexRoute = ClientsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientsRouteRoute,
} as any)

const ClientsClientIdRoute = ClientsClientIdImport.update({
  id: '/$clientId',
  path: '/$clientId',
  getParentRoute: () => ClientsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/counter': {
      id: '/counter'
      path: '/counter'
      fullPath: '/counter'
      preLoaderRoute: typeof CounterImport
      parentRoute: typeof rootRoute
    }
    '/clients/$clientId': {
      id: '/clients/$clientId'
      path: '/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof ClientsClientIdImport
      parentRoute: typeof ClientsRouteImport
    }
    '/clients/': {
      id: '/clients/'
      path: '/'
      fullPath: '/clients/'
      preLoaderRoute: typeof ClientsIndexImport
      parentRoute: typeof ClientsRouteImport
    }
  }
}

// Create and export the route tree

interface ClientsRouteRouteChildren {
  ClientsClientIdRoute: typeof ClientsClientIdRoute
  ClientsIndexRoute: typeof ClientsIndexRoute
}

const ClientsRouteRouteChildren: ClientsRouteRouteChildren = {
  ClientsClientIdRoute: ClientsClientIdRoute,
  ClientsIndexRoute: ClientsIndexRoute,
}

const ClientsRouteRouteWithChildren = ClientsRouteRoute._addFileChildren(
  ClientsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/counter': typeof CounterRoute
  '/clients/$clientId': typeof ClientsClientIdRoute
  '/clients/': typeof ClientsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/counter': typeof CounterRoute
  '/clients/$clientId': typeof ClientsClientIdRoute
  '/clients': typeof ClientsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/clients': typeof ClientsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/counter': typeof CounterRoute
  '/clients/$clientId': typeof ClientsClientIdRoute
  '/clients/': typeof ClientsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/clients'
    | '/about'
    | '/counter'
    | '/clients/$clientId'
    | '/clients/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/counter' | '/clients/$clientId' | '/clients'
  id:
    | '__root__'
    | '/'
    | '/clients'
    | '/about'
    | '/counter'
    | '/clients/$clientId'
    | '/clients/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRouteRoute: typeof ClientsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  CounterRoute: typeof CounterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRouteRoute: ClientsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  CounterRoute: CounterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clients",
        "/about",
        "/counter"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clients": {
      "filePath": "clients.route.tsx",
      "children": [
        "/clients/$clientId",
        "/clients/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/counter": {
      "filePath": "counter.tsx"
    },
    "/clients/$clientId": {
      "filePath": "clients.$clientId.tsx",
      "parent": "/clients"
    },
    "/clients/": {
      "filePath": "clients.index.tsx",
      "parent": "/clients"
    }
  }
}
ROUTE_MANIFEST_END */
